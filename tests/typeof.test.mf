dumpln(typeof(null));
dumpln(typeof(true));
dumpln(typeof(123));
dumpln(typeof("foo"));
dumpln(typeof(r"foo"));
dumpln(typeof([]));
dumpln(typeof(Map{}));
dumpln(typeof(Set{}));
dumpln(typeof(null.&));
dumpln(typeof(function(){}));

let T = type {
    .foo = "bar",
};
dumpln(typeof(new T Map{}));
################################################################################
# null
# {"init": boolean::init@builtin}
# {"init": number::init@builtin, "is_nan": number::is_nan@builtin, "is_inf": number::is_inf@builtin, "is_integer": number::is_integer@builtin, "fixed": number::fixed@builtin, "trunc": number::trunc@builtin, "round": number::round@builtin, "floor": number::floor@builtin, "ceil": number::ceil@builtin}
# {"init": string::init@builtin, "bytes": string::bytes@builtin, "runes": string::runes@builtin, "count": string::count@builtin, "contains": string::contains@builtin, "starts_with": string::starts_with@builtin, "ends_with": string::ends_with@builtin, "trim": string::trim@builtin, "find": string::find@builtin, "rfind": string::rfind@builtin, "slice": string::slice@builtin, "split": string::split@builtin, "join": string::join@builtin, "cut": string::cut@builtin, "replace": string::replace@builtin, "to_title": string::to_title@builtin, "to_upper": string::to_upper@builtin, "to_lower": string::to_lower@builtin}
# {"init": regexp::init@builtin, "split": regexp::split@builtin, "sub": regexp::sub@builtin}
# {"init": vector::init@builtin, "count": vector::count@builtin, "contains": vector::contains@builtin, "find": vector::find@builtin, "rfind": vector::rfind@builtin, "push": vector::push@builtin, "pop": vector::pop@builtin, "insert": vector::insert@builtin, "remove": vector::remove@builtin, "slice": vector::slice@builtin, "reversed": vector::reversed@builtin, "sorted": vector::sorted@builtin, "sorted_by": vector::sorted_by@builtin, "iterator": vector::iterator@builtin}
# {"count": map::count@builtin, "contains": map::contains@builtin, "insert": map::insert@builtin, "remove": map::remove@builtin, "keys": map::keys@builtin, "values": map::values@builtin, "pairs": map::pairs@builtin, "union": map::union@builtin}
# {"count": set::count@builtin, "contains": set::contains@builtin, "insert": set::insert@builtin, "remove": set::remove@builtin, "union": set::union@builtin, "intersection": set::intersection@builtin, "difference": set::difference@builtin}
# Map{}
# Map{}
# {"foo": "bar"}
