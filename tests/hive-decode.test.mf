dumpln(hive::decode(`null`));

print("\n");

dumpln(hive::decode(`true`));
dumpln(hive::decode(`false`));

print("\n");

dumpln(hive::decode(`123`));
dumpln(hive::decode(`123.456`));
try { dumpln(hive::decode(`NaN`)); } catch err { println($"error: {err}"); }
try { dumpln(hive::decode(`Inf`)); } catch err { println($"error: {err}"); }

print("\n");

dumpln(hive::decode(`"foo"`));
dumpln(hive::decode(`"foo\nbar"`));
dumpln(hive::decode("`foo\\nbar`"));

print("\n");

dumpln(hive::decode(`[]`));
dumpln(hive::decode(`["foo", "bar", "baz"]`));
dumpln(hive::decode(`["foo", ["bar"], {"baz": 123}]`));

print("\n");

dumpln(hive::decode(`Map{}`));
dumpln(hive::decode(`{"foo": 123}`));
dumpln(hive::decode(`{"foo": 123, "bar": ["abc", "def"], "baz": {"blub": null}}`));
dumpln(hive::decode(`{.foo = 123, .bar = ["abc", "def"], .baz = {"blub": null}}`));

# Test non-string keys.
dumpln(hive::decode(`{null: null}`));
dumpln(hive::decode(`{true: null}`));
dumpln(hive::decode(`{123: null}`));
dumpln(hive::decode(`{[123, 456]: null}`));
dumpln(hive::decode(`{Map{123: 456}: null}`));
dumpln(hive::decode(`{Set{123, 456}: null}`));

print("\n");

dumpln(hive::decode(`Set{}`));
dumpln(hive::decode(`{"foo", "bar"}`));
dumpln(hive::decode(`{"foo", ["abc", "def"], {"blub": null}}`));

print("\n");

try { dumpln(hive::decode(`{}`)); } catch err { println($"error: {err}"); }
################################################################################
# null
#
# true
# false
#
# 123
# 123.456
# error: expected hive value, found NaN
# error: expected hive value, found Inf
#
# "foo"
# "foo\nbar"
# "foo\\nbar"
#
# []
# ["foo", "bar", "baz"]
# ["foo", ["bar"], {"baz": 123}]
#
# Map{}
# {"foo": 123}
# {"foo": 123, "bar": ["abc", "def"], "baz": {"blub": null}}
# {"foo": 123, "bar": ["abc", "def"], "baz": {"blub": null}}
# {null: null}
# {true: null}
# {123: null}
# {[123, 456]: null}
# {{123: 456}: null}
# {{123, 456}: null}
#
# Set{}
# {"foo", "bar"}
# {"foo", ["abc", "def"], {"blub": null}}
#
# error: ambiguous empty map or set
